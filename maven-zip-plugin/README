This module is a Maven plugin which supports using a packaging of zip in a pom.xml to 
create a zip format SCA contribution.

The main difference between an SCA zip and jar contribution is that a zip contribution supports
nesting jar's within the zip and having those nested jar's available within the classloader
of the contribution. This enables packaging application classes and any 3rd party jars they
depend on together in one contribution.

The zip plugin builds a zip archive of the project and includes any dependency jars used by 
the project inside the zip in a folder name "lib" 
     
TODOs: 
- make the "lib/" folder where the dependent jars go configurable
- make which dependencies get included configurable 
  (currently its those with compile or runtime scope)

An example pom.xml:
   <packaging>zip</packaging>
   ... 
   <build>
      ...
      <plugins>
         <plugin>
            <groupId>org.apache.tuscany.maven.plugins</groupId>
            <artifactId>maven-zip-plugin</artifactId>
            <extensions>true</extensions>
         </plugin>
      ...
      </plugins>
   </build>


-----------------------------------------------------------------------------
This Tuscany module includes much code copied from the Maven WAR plugin 2.0.2 
written by the Apache Maven team.
-----------------------------------------------------------------------------


Building and releasing the plugin
---------------------------------

From the top maven-zip-plugin directory run maven:

mvn

or once all the dependencies have been downloaded and a succesful build run use:

mvn clean install -o

So as to avoid the Tuscany SCA project using SNAPSHOT dependencies any changes
to this maven-zip-plugin module should be released and the Tuscany SCA
project updated to use the newly released version.

To release this module:

mvn release:prepare

followed by: 

mvn release:perform

That will automatically create an SVN tag from the release, update the version 
numbers in the pom.xml files in the trunk and tag, and deploy the artifacts to the
staging repository defined by the <deploy.altRepository> in your Maven settings.xml.
While running it will prompt you for the names for the tag, release version etc.

In your maven settings.xml file you must have a server defined named "apache.releases",
and a profile named "release". For example:

  <servers>
    ...
    <server>
      <id>apache.releases</id>
      <username>antelder</username>
      <privateKey>\ant\id_dsa</privateKey>
      <passphrase>xxx</passphrase>
      <directoryPermissions>775</directoryPermissions>
      <filePermissions>664</filePermissions>
    </server>
  </servers>

  <profiles>
    ...
    <profile>
      <id>release</id>
      <properties>
        <gpg.passphrase>...</gpg.passphrase>
        <deploy.altRepository>apache.releases::default::scp://people.apache.org/home/antelder/public_html/tuscany/maven-zip-plugin-1.0</deploy.altRepository>
      </properties>
    </profile>
  </profiles>

Call a vote to release the module, eg: http://apache.markmail.org/message/6jnlfxbx7uklt5nv

After a successfule vote copy the staging artifacts to the live repository, eg: 

cp -p -v -R  maven-zip-plugin-alpha1/org/apache/tuscany/maven/plugins/ /x1/www/people.apache.org/repo/m2-ibiblio-rsync-repository/org/apache/tuscany/maven/plugins

